AWSTemplateFormatVersion: 2010-09-09
Metadata:
    Generator: "former2"
Description: ""
Resources:
    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-0b5eea76982371e91"
            InstanceType: "t2.micro"
            AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
            Tenancy: "default"
            SubnetId: !Ref EC2Subnet2
            EbsOptimized: false
            SecurityGroupIds: 
              - !Ref EC2SecurityGroup
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/xvda"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    SnapshotId: "snap-097c82c1f068b49cb"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            UserData: "IyEvYmluL2Jhc2gKc3VkbyB5dW0gLXkgdXBkYXRlCnN1ZG8geXVtIGluc3RhbGwgLXkgaHR0cGQKc3VkbyBzeXN0ZW1jdGwgc3RhcnQgaHR0cGQKc3VkbyBzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkCnN1ZG8geXVtIGluc3RhbGwgLXkgZ2l0CnN1ZG8geXVtIGluc3RhbGwgcnVieSB3Z2V0IC15CmNkIC9ob21lL2VjMi11c2VyCnN1ZG8gd2dldCBodHRwczovL2F3cy1jb2RlZGVwbG95LXVzLWVhc3QtMS5zMy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9sYXRlc3QvaW5zdGFsbApzdWRvIGNobW9kICt4IC4vaW5zdGFsbApzdWRvIC4vaW5zdGFsbCBhdXRvCnN1ZG8gZ2l0IGNvbmZpZyAtLXN5c3RlbSBjcmVkZW50aWFsLmhlbHBlciAnIWF3cyBjb2RlY29tbWl0IGNyZWRlbnRpYWwtaGVscGVyICRAJyAKc3VkbyBnaXQgY29uZmlnIC0tc3lzdGVtIGNyZWRlbnRpYWwuVXNlSHR0cFBhdGggdHJ1ZQpzdWRvIGdpdCBjb25maWcgLS1zeXN0ZW0gY3JlZGVudGlhbC5Vc2VIdHRwc1BhdGggdHJ1ZQpzdWRvIGdpdCBjb25maWcgLS1zeXN0ZW0gdXNlci5uYW1lICJNYXRoZXdvcyIgCnN1ZG8gZ2l0IGNvbmZpZyAtLXN5c3RlbSB1c2VyLmVtYWlsICJtYXRtYXIyQHlhaG9vLmNvbSIKY2QgL2hvbWUvZWMyLXVzZXIKc3VkbyBnaXQgY2xvbmUgLWIgbWFpbiBodHRwczovL2dpdC1jb2RlY29tbWl0LnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3YxL3JlcG9zL1RLVC1NQVQtMzctQ29kZUNvbW1pdC1SZXBv"
            IamInstanceProfile: !Ref IAMRole
            Tags: 
              - 
                Key: "Name"
                Value: "EC2-Internship"
            HibernationOptions: 
                Configured: false
            EnclaveOptions: 
                Enabled: false

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.1.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: false
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "DEV-VPC"

    EC2VPC2:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.2.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "PROD-VPC"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Prod VPC Security Group"
            GroupName: "Prod-SG"
            VpcId: !Ref EC2VPC2
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIp: "0.0.0.0/0"
                Description: "Port 554"
                FromPort: 554
                IpProtocol: "tcp"
                ToPort: 554
              - 
                CidrIp: "0.0.0.0/0"
                Description: "Port 8000"
                FromPort: 8000
                IpProtocol: "tcp"
                ToPort: 8000
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
              - 
                CidrIp: "0.0.0.0/0"
                Description: "Port 8089"
                FromPort: 8089
                IpProtocol: "tcp"
                ToPort: 8089
              - 
                CidrIp: "0.0.0.0/0"
                Description: "Port 9997"
                FromPort: 9997
                IpProtocol: "tcp"
                ToPort: 9997
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: -1
                IpProtocol: "icmp"
                ToPort: -1
              - 
                SourceSecurityGroupId: "sg-0e8e1ab5f5bf9708f"
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "Dev-VPC-SG"
                FromPort: -1
                IpProtocol: "icmp"
                ToPort: -1
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "EC2InstanceRoleForCodeDeploy"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
              - "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess"
              - "arn:aws:iam::aws:policy/AWSCodeDeployFullAccess"
            Description: "Allows EC2 instances to call AWS services on your behalf."

    IAMInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            InstanceProfileName: !Ref IAMRole
            Roles: 
              - !Ref IAMRole

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            CidrBlock: "10.2.2.0/26"
            VpcId: !Ref EC2VPC2
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "priv-prod-subnet-1"

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.2.0.0/24"
            VpcId: !Ref EC2VPC2
            MapPublicIpOnLaunch: true
            Tags: 
              - 
                Key: "Name"
                Value: "pub-prod-subnet-1"

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "10.2.2.64/26"
            VpcId: !Ref EC2VPC2
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "priv-prod-subnet-2"

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}b"
            CidrBlock: "10.2.1.0/24"
            VpcId: !Ref EC2VPC2
            MapPublicIpOnLaunch: true
            Tags: 
              - 
                Key: "Name"
                Value: "pub-prod-subnet-2"

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC2
            Tags: 
              - 
                Key: "Name"
                Value: "Routing-Table-Prod-Public-Subnet-1n2"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: "igw-02278714d69356c9f"
            RouteTableId: !Ref EC2RouteTable

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC2
            Tags: 
              - 
                Key: "Name"
                Value: "Routing-Table -Prod-Private-Subnet-1"

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: "nat-04af95bdf799b7816"
            RouteTableId: !Ref EC2RouteTable2

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet2

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet4

    EC2RouteTable3:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC2
            Tags: 
              - 
                Key: "Name"
                Value: "Routing-Table -Prod-Private-Subnet-2"

    EC2Route3:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: "nat-0fc4e5e2065334163"
            RouteTableId: !Ref EC2RouteTable3

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "ALB-Internship"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet4
              - !Ref EC2Subnet2
            SecurityGroups: 
              - !Ref EC2SecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    ElasticLoadBalancingV2Listener2:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 8080
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    ElasticLoadBalancingV2ListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            ListenerArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/5488027b79c4869f/0a63d0b55b40ffb7"
            Conditions: 
              - 
                Field: "path-pattern"
                Values: 
                  - "/TKT-MAT-37-CodeCommit-Repo/index.html"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Order: 1
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false

    AutoScalingAutoScalingGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
            AutoScalingGroupName: "ASG-Internship-Ticket-MAT39"
            LaunchTemplate: 
                LaunchTemplateId: !Ref EC2LaunchTemplate
                LaunchTemplateName: "EC2-Launch-Template"
                Version: "$Default"
            MinSize: 1
            MaxSize: 3
            DesiredCapacity: 1
            Cooldown: 300
            AvailabilityZones: 
              - !GetAtt EC2Instance.AvailabilityZone
              - !GetAtt EC2Subnet3.AvailabilityZone
            TargetGroupARNs: 
              - !Ref ElasticLoadBalancingV2TargetGroup
            HealthCheckType: "EC2"
            HealthCheckGracePeriod: 300
            VPCZoneIdentifier: 
              - !Ref EC2Subnet4
              - !Ref EC2Subnet2
            TerminationPolicies: 
              - "Default"
            ServiceLinkedRoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            NewInstancesProtectedFromScaleIn: false

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "80"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 5
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC2
            Name: "Target-Group-Internship"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: !Ref EC2Instance
                Port: 80

    EC2LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        Properties:
            LaunchTemplateName: "EC2-Launch-Template"
            LaunchTemplateData: 
                TagSpecifications: 
                  - 
                    ResourceType: "instance"
                    Tags: 
                      - 
                        Key: "Name"
                        Value: "EC2-Internship"
                UserData: "IyEvYmluL2Jhc2gKc3VkbyB5dW0gLXkgdXBkYXRlCnN1ZG8geXVtIGluc3RhbGwgLXkgaHR0cGQKc3VkbyBzeXN0ZW1jdGwgc3RhcnQgaHR0cGQKc3VkbyBzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkCnN1ZG8geXVtIGluc3RhbGwgLXkgZ2l0CnN1ZG8geXVtIGluc3RhbGwgcnVieSB3Z2V0IC15CmNkIC9ob21lL2VjMi11c2VyCnN1ZG8gd2dldCBodHRwczovL2F3cy1jb2RlZGVwbG95LXVzLWVhc3QtMS5zMy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9sYXRlc3QvaW5zdGFsbApzdWRvIGNobW9kICt4IC4vaW5zdGFsbApzdWRvIC4vaW5zdGFsbCBhdXRvCnN1ZG8gZ2l0IGNvbmZpZyAtLXN5c3RlbSBjcmVkZW50aWFsLmhlbHBlciAnIWF3cyBjb2RlY29tbWl0IGNyZWRlbnRpYWwtaGVscGVyICRAJyAKc3VkbyBnaXQgY29uZmlnIC0tc3lzdGVtIGNyZWRlbnRpYWwuVXNlSHR0cFBhdGggdHJ1ZQpzdWRvIGdpdCBjb25maWcgLS1zeXN0ZW0gY3JlZGVudGlhbC5Vc2VIdHRwc1BhdGggdHJ1ZQpzdWRvIGdpdCBjb25maWcgLS1zeXN0ZW0gdXNlci5uYW1lICJNYXRoZXdvcyIgCnN1ZG8gZ2l0IGNvbmZpZyAtLXN5c3RlbSB1c2VyLmVtYWlsICJtYXRtYXIyQHlhaG9vLmNvbSIKY2QgL2hvbWUvZWMyLXVzZXIKc3VkbyBnaXQgY2xvbmUgLWIgbWFpbiBodHRwczovL2dpdC1jb2RlY29tbWl0LnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3YxL3JlcG9zL1RLVC1NQVQtMzctQ29kZUNvbW1pdC1SZXBv"
                IamInstanceProfile: 
                    Arn: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/${IAMRole}"
                NetworkInterfaces: 
                  - 
                    AssociatePublicIpAddress: true
                    DeviceIndex: 0
                    Groups: 
                      - !Ref EC2SecurityGroup
                    SubnetId: !Ref EC2Subnet2
                ImageId: "ami-0b5eea76982371e91"
                InstanceType: "t2.micro"

